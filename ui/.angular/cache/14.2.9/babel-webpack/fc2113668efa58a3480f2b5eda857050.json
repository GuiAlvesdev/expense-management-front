{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nlet CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\n\nclass InputManager {\n  constructor(htmlInputElement) {\n    this.htmlInputElement = htmlInputElement;\n  }\n\n  setCursorAt(position) {\n    if (this.htmlInputElement.setSelectionRange) {\n      this.htmlInputElement.focus();\n      this.htmlInputElement.setSelectionRange(position, position);\n    } else if (this.htmlInputElement.createTextRange) {\n      let textRange = this.htmlInputElement.createTextRange();\n      textRange.collapse(true);\n      textRange.moveEnd(\"character\", position);\n      textRange.moveStart(\"character\", position);\n      textRange.select();\n    }\n  }\n\n  updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n    this.rawValue = newRawValue;\n    let newLength = newRawValue.length;\n    selectionStart = selectionStart - (oldLength - newLength);\n    this.setCursorAt(selectionStart);\n  }\n\n  get canInputMoreNumbers() {\n    let haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n    let selectionStart = this.inputSelection.selectionStart;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let haveNumberSelected = selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/) ? true : false;\n    let startWithZero = this.htmlInputElement.value.substring(0, 1) == \"0\";\n    return haventReachedMaxLength || haveNumberSelected || startWithZero;\n  }\n\n  get inputSelection() {\n    let selectionStart = 0;\n    let selectionEnd = 0;\n\n    if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n      selectionStart = this.htmlInputElement.selectionStart;\n      selectionEnd = this.htmlInputElement.selectionEnd;\n    } else {\n      let range = document.getSelection().anchorNode;\n\n      if (range && range.firstChild == this.htmlInputElement) {\n        let lenght = this.htmlInputElement.value.length;\n        let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n        let startRange = this.htmlInputElement.createTextRange();\n        let endRange = this.htmlInputElement.createTextRange();\n        endRange.collapse(false);\n\n        if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n          selectionStart = selectionEnd = lenght;\n        } else {\n          selectionStart = -startRange.moveStart(\"character\", -lenght);\n          selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n\n          if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n            selectionEnd = lenght;\n          } else {\n            selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n            selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n          }\n        }\n      }\n    }\n\n    return {\n      selectionStart: selectionStart,\n      selectionEnd: selectionEnd\n    };\n  }\n\n  get rawValue() {\n    return this.htmlInputElement && this.htmlInputElement.value;\n  }\n\n  set rawValue(value) {\n    this._storedRawValue = value;\n\n    if (this.htmlInputElement) {\n      this.htmlInputElement.value = value;\n    }\n  }\n\n  get storedRawValue() {\n    return this._storedRawValue;\n  }\n\n}\n\nclass InputService {\n  constructor(htmlInputElement, options) {\n    this.htmlInputElement = htmlInputElement;\n    this.options = options;\n    this.inputManager = new InputManager(htmlInputElement);\n  }\n\n  addNumber(keyCode) {\n    if (!this.rawValue) {\n      this.rawValue = this.applyMask(false, \"0\");\n    }\n\n    let keyChar = String.fromCharCode(keyCode);\n    let selectionStart = this.inputSelection.selectionStart;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    this.rawValue = this.rawValue.substring(0, selectionStart) + keyChar + this.rawValue.substring(selectionEnd, this.rawValue.length);\n    this.updateFieldValue(selectionStart + 1);\n  }\n\n  applyMask(isNumber, rawValue) {\n    let {\n      allowNegative,\n      decimal,\n      precision,\n      prefix,\n      suffix,\n      thousands\n    } = this.options;\n    rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n    let onlyNumbers = rawValue.replace(/[^0-9]/g, \"\");\n\n    if (!onlyNumbers) {\n      return \"\";\n    }\n\n    let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^0*/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands);\n\n    if (integerPart == \"\") {\n      integerPart = \"0\";\n    }\n\n    let newRawValue = integerPart;\n    let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n\n    if (precision > 0) {\n      decimalPart = \"0\".repeat(precision - decimalPart.length) + decimalPart;\n      newRawValue += decimal + decimalPart;\n    }\n\n    let isZero = parseInt(integerPart) == 0 && (parseInt(decimalPart) == 0 || decimalPart == \"\");\n    let operator = rawValue.indexOf(\"-\") > -1 && allowNegative && !isZero ? \"-\" : \"\";\n    return operator + prefix + newRawValue + suffix;\n  }\n\n  clearMask(rawValue) {\n    if (rawValue == null || rawValue == \"\") {\n      return null;\n    }\n\n    let value = rawValue.replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n\n    if (this.options.thousands) {\n      value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n    }\n\n    if (this.options.decimal) {\n      value = value.replace(this.options.decimal, \".\");\n    }\n\n    return parseFloat(value);\n  }\n\n  changeToNegative() {\n    if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n      let selectionStart = this.inputSelection.selectionStart;\n      this.rawValue = \"-\" + this.rawValue;\n      this.updateFieldValue(selectionStart + 1);\n    }\n  }\n\n  changeToPositive() {\n    let selectionStart = this.inputSelection.selectionStart;\n    this.rawValue = this.rawValue.replace(\"-\", \"\");\n    this.updateFieldValue(selectionStart - 1);\n  }\n\n  fixCursorPosition(forceToEndPosition) {\n    let currentCursorPosition = this.inputSelection.selectionStart; //if the current cursor position is after the number end position, it is moved to the end of the number, ignoring the prefix or suffix. this behavior can be forced with forceToEndPosition flag\n\n    if (currentCursorPosition > this.getRawValueWithoutSuffixEndPosition() || forceToEndPosition) {\n      this.inputManager.setCursorAt(this.getRawValueWithoutSuffixEndPosition()); //if the current cursor position is before the number start position, it is moved to the start of the number, ignoring the prefix or suffix\n    } else if (currentCursorPosition < this.getRawValueWithoutPrefixStartPosition()) {\n      this.inputManager.setCursorAt(this.getRawValueWithoutPrefixStartPosition());\n    }\n  }\n\n  getRawValueWithoutSuffixEndPosition() {\n    return this.rawValue.length - this.options.suffix.length;\n  }\n\n  getRawValueWithoutPrefixStartPosition() {\n    return this.value != null && this.value < 0 ? this.options.prefix.length + 1 : this.options.prefix.length;\n  }\n\n  removeNumber(keyCode) {\n    let {\n      decimal,\n      thousands\n    } = this.options;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let selectionStart = this.inputSelection.selectionStart;\n\n    if (selectionStart > this.rawValue.length - this.options.suffix.length) {\n      selectionEnd = this.rawValue.length - this.options.suffix.length;\n      selectionStart = this.rawValue.length - this.options.suffix.length;\n    } //there is no selection\n\n\n    if (selectionEnd == selectionStart) {\n      //delete key and the target digit is a number\n      if ((keyCode == 46 || keyCode == 63272) && /^\\d+$/.test(this.rawValue.substring(selectionStart, selectionEnd + 1))) {\n        selectionEnd = selectionEnd + 1;\n      } //delete key and the target digit is the decimal or thousands divider\n\n\n      if ((keyCode == 46 || keyCode == 63272) && (this.rawValue.substring(selectionStart, selectionEnd + 1) == decimal || this.rawValue.substring(selectionStart, selectionEnd + 1) == thousands)) {\n        selectionEnd = selectionEnd + 2;\n        selectionStart = selectionStart + 1;\n      } //backspace key and the target digit is a number\n\n\n      if (keyCode == 8 && /^\\d+$/.test(this.rawValue.substring(selectionStart - 1, selectionEnd))) {\n        selectionStart = selectionStart - 1;\n      } //backspace key and the target digit is the decimal or thousands divider\n\n\n      if (keyCode == 8 && (this.rawValue.substring(selectionStart - 1, selectionEnd) == decimal || this.rawValue.substring(selectionStart - 1, selectionEnd) == thousands)) {\n        selectionStart = selectionStart - 2;\n        selectionEnd = selectionEnd - 1;\n      }\n    }\n\n    this.rawValue = this.rawValue.substring(0, selectionStart) + this.rawValue.substring(selectionEnd, this.rawValue.length);\n    this.updateFieldValue(selectionStart);\n  }\n\n  updateFieldValue(selectionStart) {\n    let newRawValue = this.applyMask(false, this.rawValue || \"\");\n    selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n    this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n  }\n\n  updateOptions(options) {\n    let value = this.value;\n    this.options = options;\n    this.value = value;\n  }\n\n  get canInputMoreNumbers() {\n    return this.inputManager.canInputMoreNumbers;\n  }\n\n  get inputSelection() {\n    return this.inputManager.inputSelection;\n  }\n\n  get rawValue() {\n    return this.inputManager.rawValue;\n  }\n\n  set rawValue(value) {\n    this.inputManager.rawValue = value;\n  }\n\n  get storedRawValue() {\n    return this.inputManager.storedRawValue;\n  }\n\n  get value() {\n    return this.clearMask(this.rawValue);\n  }\n\n  set value(value) {\n    this.rawValue = this.applyMask(true, \"\" + value);\n  }\n\n}\n\nclass InputHandler {\n  constructor(htmlInputElement, options) {\n    this.inputService = new InputService(htmlInputElement, options);\n    this.htmlInputElement = htmlInputElement;\n  }\n\n  handleClick(event, chromeAndroid) {\n    let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart); //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\n\n    if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n      this.inputService.fixCursorPosition(chromeAndroid);\n    }\n  }\n\n  handleCut(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 0);\n  }\n\n  handleInput(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n\n    let keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\n    let rawValueLength = this.inputService.rawValue.length;\n    let rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n    let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n    let storedRawValueLength = this.inputService.storedRawValue.length;\n    this.inputService.rawValue = this.inputService.storedRawValue;\n\n    if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\n      this.setCursorPosition(event);\n      return;\n    }\n\n    if (rawValueLength < storedRawValueLength) {\n      if (this.inputService.value != 0) {\n        this.inputService.removeNumber(8);\n      } else {\n        this.setValue(null);\n      }\n    }\n\n    if (rawValueLength > storedRawValueLength) {\n      switch (keyCode) {\n        case 43:\n          this.inputService.changeToPositive();\n          break;\n\n        case 45:\n          this.inputService.changeToNegative();\n          break;\n\n        default:\n          if (!this.inputService.canInputMoreNumbers || isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null) {\n            return;\n          }\n\n          this.inputService.addNumber(keyCode);\n      }\n    }\n\n    this.setCursorPosition(event);\n    this.onModelChange(this.inputService.value);\n  }\n\n  handleKeydown(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n\n    let keyCode = event.which || event.charCode || event.keyCode;\n\n    if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n      event.preventDefault();\n      let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n\n      if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\n        this.setValue(null);\n        this.onModelChange(this.inputService.value);\n      }\n\n      if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n        this.inputService.removeNumber(keyCode);\n        this.onModelChange(this.inputService.value);\n      }\n\n      if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\n        this.inputService.removeNumber(keyCode);\n        this.onModelChange(this.inputService.value);\n      }\n    }\n  }\n\n  handleKeypress(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n\n    let keyCode = event.which || event.charCode || event.keyCode;\n\n    if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\n      return;\n    }\n\n    switch (keyCode) {\n      case 43:\n        this.inputService.changeToPositive();\n        break;\n\n      case 45:\n        this.inputService.changeToNegative();\n        break;\n\n      default:\n        if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\n          this.inputService.addNumber(keyCode);\n        }\n\n    }\n\n    event.preventDefault();\n    this.onModelChange(this.inputService.value);\n  }\n\n  handleKeyup(event) {\n    this.inputService.fixCursorPosition();\n  }\n\n  handlePaste(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 1);\n  }\n\n  updateOptions(options) {\n    this.inputService.updateOptions(options);\n  }\n\n  getOnModelChange() {\n    return this.onModelChange;\n  }\n\n  setOnModelChange(callbackFunction) {\n    this.onModelChange = callbackFunction;\n  }\n\n  getOnModelTouched() {\n    return this.onModelTouched;\n  }\n\n  setOnModelTouched(callbackFunction) {\n    this.onModelTouched = callbackFunction;\n  }\n\n  setValue(value) {\n    this.inputService.value = value;\n  }\n\n  getNewKeyCode(oldString, newString) {\n    if (oldString.length > newString.length) {\n      return null;\n    }\n\n    for (let x = 0; x < newString.length; x++) {\n      if (oldString.length == x || oldString[x] != newString[x]) {\n        return newString.charCodeAt(x);\n      }\n    }\n\n    return null;\n  }\n\n  isArrowEndHomeKeyInFirefox(event) {\n    if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isReadOnly() {\n    return this.htmlInputElement && this.htmlInputElement.readOnly;\n  }\n\n  setCursorPosition(event) {\n    let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition(); // For some reason, in Android, the event got override before the timeout and change the target.\n\n    const inputElement = event.target;\n    setTimeout(function () {\n      inputElement.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\n    }, 0);\n  }\n\n}\n\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CurrencyMaskDirective),\n  multi: true\n};\n\nclass CurrencyMaskDirective {\n  constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n    this.currencyMaskConfig = currencyMaskConfig;\n    this.elementRef = elementRef;\n    this.keyValueDiffers = keyValueDiffers;\n    this.options = {};\n    this.optionsTemplate = {\n      align: \"right\",\n      allowNegative: true,\n      decimal: \".\",\n      precision: 2,\n      prefix: \"$ \",\n      suffix: \"\",\n      thousands: \",\"\n    };\n\n    if (currencyMaskConfig) {\n      this.optionsTemplate = currencyMaskConfig;\n    }\n\n    this.keyValueDiffer = keyValueDiffers.find({}).create();\n  }\n\n  ngAfterViewInit() {\n    this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n  }\n\n  ngDoCheck() {\n    if (this.keyValueDiffer.diff(this.options)) {\n      this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n      this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n    }\n  }\n\n  ngOnInit() {\n    this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n  }\n\n  handleBlur(event) {\n    this.inputHandler.getOnModelTouched().apply(event);\n  }\n\n  handleClick(event) {\n    this.inputHandler.handleClick(event, this.isChromeAndroid());\n  }\n\n  handleCut(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleCut(event);\n    }\n  }\n\n  handleInput(event) {\n    if (this.isChromeAndroid()) {\n      this.inputHandler.handleInput(event);\n    }\n  }\n\n  handleKeydown(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleKeydown(event);\n    }\n  }\n\n  handleKeypress(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleKeypress(event);\n    }\n  }\n\n  handleKeyup(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleKeyup(event);\n    }\n  }\n\n  handlePaste(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handlePaste(event);\n    }\n  }\n\n  isChromeAndroid() {\n    return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n  }\n\n  registerOnChange(callbackFunction) {\n    this.inputHandler.setOnModelChange(callbackFunction);\n  }\n\n  registerOnTouched(callbackFunction) {\n    this.inputHandler.setOnModelTouched(callbackFunction);\n  }\n\n  setDisabledState(value) {\n    this.elementRef.nativeElement.disabled = value;\n  }\n\n  validate(abstractControl) {\n    let result = {};\n\n    if (abstractControl.value > this.max) {\n      result.max = true;\n    }\n\n    if (abstractControl.value < this.min) {\n      result.min = true;\n    }\n\n    return result != {} ? result : null;\n  }\n\n  writeValue(value) {\n    this.inputHandler.setValue(value);\n  }\n\n}\n\nCurrencyMaskDirective.ɵfac = function CurrencyMaskDirective_Factory(t) {\n  return new (t || CurrencyMaskDirective)(i0.ɵɵdirectiveInject(CURRENCY_MASK_CONFIG, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.KeyValueDiffers));\n};\n\nCurrencyMaskDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CurrencyMaskDirective,\n  selectors: [[\"\", \"currencyMask\", \"\"]],\n  hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"blur\", function CurrencyMaskDirective_blur_HostBindingHandler($event) {\n        return ctx.handleBlur($event);\n      })(\"click\", function CurrencyMaskDirective_click_HostBindingHandler($event) {\n        return ctx.handleClick($event);\n      })(\"cut\", function CurrencyMaskDirective_cut_HostBindingHandler($event) {\n        return ctx.handleCut($event);\n      })(\"input\", function CurrencyMaskDirective_input_HostBindingHandler($event) {\n        return ctx.handleInput($event);\n      })(\"keydown\", function CurrencyMaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.handleKeydown($event);\n      })(\"keypress\", function CurrencyMaskDirective_keypress_HostBindingHandler($event) {\n        return ctx.handleKeypress($event);\n      })(\"keyup\", function CurrencyMaskDirective_keyup_HostBindingHandler($event) {\n        return ctx.handleKeyup($event);\n      })(\"paste\", function CurrencyMaskDirective_paste_HostBindingHandler($event) {\n        return ctx.handlePaste($event);\n      });\n    }\n  },\n  inputs: {\n    max: \"max\",\n    min: \"min\",\n    options: \"options\"\n  },\n  features: [i0.ɵɵProvidersFeature([CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, {\n    provide: NG_VALIDATORS,\n    useExisting: CurrencyMaskDirective,\n    multi: true\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrencyMaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[currencyMask]\",\n      providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, {\n        provide: NG_VALIDATORS,\n        useExisting: CurrencyMaskDirective,\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CURRENCY_MASK_CONFIG]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.KeyValueDiffers\n    }];\n  }, {\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    handleBlur: [{\n      type: HostListener,\n      args: [\"blur\", [\"$event\"]]\n    }],\n    handleClick: [{\n      type: HostListener,\n      args: [\"click\", [\"$event\"]]\n    }],\n    handleCut: [{\n      type: HostListener,\n      args: [\"cut\", [\"$event\"]]\n    }],\n    handleInput: [{\n      type: HostListener,\n      args: [\"input\", [\"$event\"]]\n    }],\n    handleKeydown: [{\n      type: HostListener,\n      args: [\"keydown\", [\"$event\"]]\n    }],\n    handleKeypress: [{\n      type: HostListener,\n      args: [\"keypress\", [\"$event\"]]\n    }],\n    handleKeyup: [{\n      type: HostListener,\n      args: [\"keyup\", [\"$event\"]]\n    }],\n    handlePaste: [{\n      type: HostListener,\n      args: [\"paste\", [\"$event\"]]\n    }]\n  });\n})();\n\nclass CurrencyMaskModule {}\n\nCurrencyMaskModule.ɵfac = function CurrencyMaskModule_Factory(t) {\n  return new (t || CurrencyMaskModule)();\n};\n\nCurrencyMaskModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CurrencyMaskModule\n});\nCurrencyMaskModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrencyMaskModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule],\n      declarations: [CurrencyMaskDirective],\n      exports: [CurrencyMaskDirective]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ng2-currency-mask\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskModule };","map":{"version":3,"names":["i0","InjectionToken","forwardRef","Directive","Optional","Inject","Input","HostListener","NgModule","NG_VALUE_ACCESSOR","NG_VALIDATORS","FormsModule","CommonModule","CURRENCY_MASK_CONFIG","InputManager","constructor","htmlInputElement","setCursorAt","position","setSelectionRange","focus","createTextRange","textRange","collapse","moveEnd","moveStart","select","updateValueAndCursor","newRawValue","oldLength","selectionStart","rawValue","newLength","length","canInputMoreNumbers","haventReachedMaxLength","maxLength","inputSelection","selectionEnd","haveNumberSelected","value","substring","match","startWithZero","range","document","getSelection","anchorNode","firstChild","lenght","normalizedValue","replace","startRange","endRange","compareEndPoints","slice","split","_storedRawValue","storedRawValue","InputService","options","inputManager","addNumber","keyCode","applyMask","keyChar","String","fromCharCode","updateFieldValue","isNumber","allowNegative","decimal","precision","prefix","suffix","thousands","Number","toFixed","onlyNumbers","integerPart","decimalPart","repeat","isZero","parseInt","operator","indexOf","clearMask","RegExp","parseFloat","changeToNegative","charAt","changeToPositive","fixCursorPosition","forceToEndPosition","currentCursorPosition","getRawValueWithoutSuffixEndPosition","getRawValueWithoutPrefixStartPosition","removeNumber","test","undefined","updateOptions","InputHandler","inputService","handleClick","event","chromeAndroid","selectionRangeLength","Math","abs","isNaN","handleCut","isReadOnly","setTimeout","setValue","onModelChange","handleInput","getNewKeyCode","rawValueLength","rawValueSelectionEnd","rawValueWithoutSuffixEndPosition","storedRawValueLength","setCursorPosition","handleKeydown","which","charCode","preventDefault","handleKeypress","isArrowEndHomeKeyInFirefox","handleKeyup","handlePaste","getOnModelChange","setOnModelChange","callbackFunction","getOnModelTouched","onModelTouched","setOnModelTouched","oldString","newString","x","charCodeAt","readOnly","inputElement","target","CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR","provide","useExisting","CurrencyMaskDirective","multi","currencyMaskConfig","elementRef","keyValueDiffers","optionsTemplate","align","keyValueDiffer","find","create","ngAfterViewInit","nativeElement","style","textAlign","ngDoCheck","diff","inputHandler","Object","assign","ngOnInit","handleBlur","apply","isChromeAndroid","navigator","userAgent","registerOnChange","registerOnTouched","setDisabledState","disabled","validate","abstractControl","result","max","min","writeValue","ɵfac","ElementRef","KeyValueDiffers","ɵdir","type","args","selector","providers","decorators","CurrencyMaskModule","ɵmod","ɵinj","imports","declarations","exports"],"sources":["C:/Users/guilh/Documents/expense-management/ui/node_modules/ng2-currency-mask/fesm2020/ng2-currency-mask.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nlet CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\n\nclass InputManager {\n    constructor(htmlInputElement) {\n        this.htmlInputElement = htmlInputElement;\n    }\n    setCursorAt(position) {\n        if (this.htmlInputElement.setSelectionRange) {\n            this.htmlInputElement.focus();\n            this.htmlInputElement.setSelectionRange(position, position);\n        }\n        else if (this.htmlInputElement.createTextRange) {\n            let textRange = this.htmlInputElement.createTextRange();\n            textRange.collapse(true);\n            textRange.moveEnd(\"character\", position);\n            textRange.moveStart(\"character\", position);\n            textRange.select();\n        }\n    }\n    updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n        this.rawValue = newRawValue;\n        let newLength = newRawValue.length;\n        selectionStart = selectionStart - (oldLength - newLength);\n        this.setCursorAt(selectionStart);\n    }\n    get canInputMoreNumbers() {\n        let haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let haveNumberSelected = selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/) ? true : false;\n        let startWithZero = this.htmlInputElement.value.substring(0, 1) == \"0\";\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n    get inputSelection() {\n        let selectionStart = 0;\n        let selectionEnd = 0;\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n            selectionStart = this.htmlInputElement.selectionStart;\n            selectionEnd = this.htmlInputElement.selectionEnd;\n        }\n        else {\n            let range = document.getSelection().anchorNode;\n            if (range && range.firstChild == this.htmlInputElement) {\n                let lenght = this.htmlInputElement.value.length;\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n                let startRange = this.htmlInputElement.createTextRange();\n                let endRange = this.htmlInputElement.createTextRange();\n                endRange.collapse(false);\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n                    selectionStart = selectionEnd = lenght;\n                }\n                else {\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n                        selectionEnd = lenght;\n                    }\n                    else {\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n                    }\n                }\n            }\n        }\n        return {\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd,\n        };\n    }\n    get rawValue() {\n        return this.htmlInputElement && this.htmlInputElement.value;\n    }\n    set rawValue(value) {\n        this._storedRawValue = value;\n        if (this.htmlInputElement) {\n            this.htmlInputElement.value = value;\n        }\n    }\n    get storedRawValue() {\n        return this._storedRawValue;\n    }\n}\n\nclass InputService {\n    constructor(htmlInputElement, options) {\n        this.htmlInputElement = htmlInputElement;\n        this.options = options;\n        this.inputManager = new InputManager(htmlInputElement);\n    }\n    addNumber(keyCode) {\n        if (!this.rawValue) {\n            this.rawValue = this.applyMask(false, \"0\");\n        }\n        let keyChar = String.fromCharCode(keyCode);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        this.rawValue = this.rawValue.substring(0, selectionStart) + keyChar + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart + 1);\n    }\n    applyMask(isNumber, rawValue) {\n        let { allowNegative, decimal, precision, prefix, suffix, thousands } = this.options;\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n        let onlyNumbers = rawValue.replace(/[^0-9]/g, \"\");\n        if (!onlyNumbers) {\n            return \"\";\n        }\n        let integerPart = onlyNumbers\n            .slice(0, onlyNumbers.length - precision)\n            .replace(/^0*/g, \"\")\n            .replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands);\n        if (integerPart == \"\") {\n            integerPart = \"0\";\n        }\n        let newRawValue = integerPart;\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n        if (precision > 0) {\n            decimalPart = \"0\".repeat(precision - decimalPart.length) + decimalPart;\n            newRawValue += decimal + decimalPart;\n        }\n        let isZero = parseInt(integerPart) == 0 && (parseInt(decimalPart) == 0 || decimalPart == \"\");\n        let operator = rawValue.indexOf(\"-\") > -1 && allowNegative && !isZero ? \"-\" : \"\";\n        return operator + prefix + newRawValue + suffix;\n    }\n    clearMask(rawValue) {\n        if (rawValue == null || rawValue == \"\") {\n            return null;\n        }\n        let value = rawValue.replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n        if (this.options.thousands) {\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n        }\n        if (this.options.decimal) {\n            value = value.replace(this.options.decimal, \".\");\n        }\n        return parseFloat(value);\n    }\n    changeToNegative() {\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n            let selectionStart = this.inputSelection.selectionStart;\n            this.rawValue = \"-\" + this.rawValue;\n            this.updateFieldValue(selectionStart + 1);\n        }\n    }\n    changeToPositive() {\n        let selectionStart = this.inputSelection.selectionStart;\n        this.rawValue = this.rawValue.replace(\"-\", \"\");\n        this.updateFieldValue(selectionStart - 1);\n    }\n    fixCursorPosition(forceToEndPosition) {\n        let currentCursorPosition = this.inputSelection.selectionStart;\n        //if the current cursor position is after the number end position, it is moved to the end of the number, ignoring the prefix or suffix. this behavior can be forced with forceToEndPosition flag\n        if (currentCursorPosition > this.getRawValueWithoutSuffixEndPosition() || forceToEndPosition) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutSuffixEndPosition());\n            //if the current cursor position is before the number start position, it is moved to the start of the number, ignoring the prefix or suffix\n        }\n        else if (currentCursorPosition < this.getRawValueWithoutPrefixStartPosition()) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutPrefixStartPosition());\n        }\n    }\n    getRawValueWithoutSuffixEndPosition() {\n        return this.rawValue.length - this.options.suffix.length;\n    }\n    getRawValueWithoutPrefixStartPosition() {\n        return this.value != null && this.value < 0 ? this.options.prefix.length + 1 : this.options.prefix.length;\n    }\n    removeNumber(keyCode) {\n        let { decimal, thousands } = this.options;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let selectionStart = this.inputSelection.selectionStart;\n        if (selectionStart > this.rawValue.length - this.options.suffix.length) {\n            selectionEnd = this.rawValue.length - this.options.suffix.length;\n            selectionStart = this.rawValue.length - this.options.suffix.length;\n        }\n        //there is no selection\n        if (selectionEnd == selectionStart) {\n            //delete key and the target digit is a number\n            if ((keyCode == 46 || keyCode == 63272) && /^\\d+$/.test(this.rawValue.substring(selectionStart, selectionEnd + 1))) {\n                selectionEnd = selectionEnd + 1;\n            }\n            //delete key and the target digit is the decimal or thousands divider\n            if ((keyCode == 46 || keyCode == 63272) &&\n                (this.rawValue.substring(selectionStart, selectionEnd + 1) == decimal || this.rawValue.substring(selectionStart, selectionEnd + 1) == thousands)) {\n                selectionEnd = selectionEnd + 2;\n                selectionStart = selectionStart + 1;\n            }\n            //backspace key and the target digit is a number\n            if (keyCode == 8 && /^\\d+$/.test(this.rawValue.substring(selectionStart - 1, selectionEnd))) {\n                selectionStart = selectionStart - 1;\n            }\n            //backspace key and the target digit is the decimal or thousands divider\n            if (keyCode == 8 &&\n                (this.rawValue.substring(selectionStart - 1, selectionEnd) == decimal || this.rawValue.substring(selectionStart - 1, selectionEnd) == thousands)) {\n                selectionStart = selectionStart - 2;\n                selectionEnd = selectionEnd - 1;\n            }\n        }\n        this.rawValue = this.rawValue.substring(0, selectionStart) + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart);\n    }\n    updateFieldValue(selectionStart) {\n        let newRawValue = this.applyMask(false, this.rawValue || \"\");\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n    }\n    updateOptions(options) {\n        let value = this.value;\n        this.options = options;\n        this.value = value;\n    }\n    get canInputMoreNumbers() {\n        return this.inputManager.canInputMoreNumbers;\n    }\n    get inputSelection() {\n        return this.inputManager.inputSelection;\n    }\n    get rawValue() {\n        return this.inputManager.rawValue;\n    }\n    set rawValue(value) {\n        this.inputManager.rawValue = value;\n    }\n    get storedRawValue() {\n        return this.inputManager.storedRawValue;\n    }\n    get value() {\n        return this.clearMask(this.rawValue);\n    }\n    set value(value) {\n        this.rawValue = this.applyMask(true, \"\" + value);\n    }\n}\n\nclass InputHandler {\n    constructor(htmlInputElement, options) {\n        this.inputService = new InputService(htmlInputElement, options);\n        this.htmlInputElement = htmlInputElement;\n    }\n    handleClick(event, chromeAndroid) {\n        let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n        //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\n        if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n            this.inputService.fixCursorPosition(chromeAndroid);\n        }\n    }\n    handleCut(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 0);\n    }\n    handleInput(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\n        let rawValueLength = this.inputService.rawValue.length;\n        let rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n        let storedRawValueLength = this.inputService.storedRawValue.length;\n        this.inputService.rawValue = this.inputService.storedRawValue;\n        if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\n            this.setCursorPosition(event);\n            return;\n        }\n        if (rawValueLength < storedRawValueLength) {\n            if (this.inputService.value != 0) {\n                this.inputService.removeNumber(8);\n            }\n            else {\n                this.setValue(null);\n            }\n        }\n        if (rawValueLength > storedRawValueLength) {\n            switch (keyCode) {\n                case 43:\n                    this.inputService.changeToPositive();\n                    break;\n                case 45:\n                    this.inputService.changeToNegative();\n                    break;\n                default:\n                    if (!this.inputService.canInputMoreNumbers || (isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null)) {\n                        return;\n                    }\n                    this.inputService.addNumber(keyCode);\n            }\n        }\n        this.setCursorPosition(event);\n        this.onModelChange(this.inputService.value);\n    }\n    handleKeydown(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n            event.preventDefault();\n            let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n            if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\n                this.setValue(null);\n                this.onModelChange(this.inputService.value);\n            }\n            if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n            if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n        }\n    }\n    handleKeypress(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\n            return;\n        }\n        switch (keyCode) {\n            case 43:\n                this.inputService.changeToPositive();\n                break;\n            case 45:\n                this.inputService.changeToNegative();\n                break;\n            default:\n                if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\n                    this.inputService.addNumber(keyCode);\n                }\n        }\n        event.preventDefault();\n        this.onModelChange(this.inputService.value);\n    }\n    handleKeyup(event) {\n        this.inputService.fixCursorPosition();\n    }\n    handlePaste(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 1);\n    }\n    updateOptions(options) {\n        this.inputService.updateOptions(options);\n    }\n    getOnModelChange() {\n        return this.onModelChange;\n    }\n    setOnModelChange(callbackFunction) {\n        this.onModelChange = callbackFunction;\n    }\n    getOnModelTouched() {\n        return this.onModelTouched;\n    }\n    setOnModelTouched(callbackFunction) {\n        this.onModelTouched = callbackFunction;\n    }\n    setValue(value) {\n        this.inputService.value = value;\n    }\n    getNewKeyCode(oldString, newString) {\n        if (oldString.length > newString.length) {\n            return null;\n        }\n        for (let x = 0; x < newString.length; x++) {\n            if (oldString.length == x || oldString[x] != newString[x]) {\n                return newString.charCodeAt(x);\n            }\n        }\n        return null;\n    }\n    isArrowEndHomeKeyInFirefox(event) {\n        if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\n            return true;\n        }\n        return false;\n    }\n    isReadOnly() {\n        return this.htmlInputElement && this.htmlInputElement.readOnly;\n    }\n    setCursorPosition(event) {\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n        // For some reason, in Android, the event got override before the timeout and change the target.\n        const inputElement = event.target;\n        setTimeout(function () {\n            inputElement.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\n        }, 0);\n    }\n}\n\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CurrencyMaskDirective),\n    multi: true,\n};\nclass CurrencyMaskDirective {\n    constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n        this.currencyMaskConfig = currencyMaskConfig;\n        this.elementRef = elementRef;\n        this.keyValueDiffers = keyValueDiffers;\n        this.options = {};\n        this.optionsTemplate = {\n            align: \"right\",\n            allowNegative: true,\n            decimal: \".\",\n            precision: 2,\n            prefix: \"$ \",\n            suffix: \"\",\n            thousands: \",\",\n        };\n        if (currencyMaskConfig) {\n            this.optionsTemplate = currencyMaskConfig;\n        }\n        this.keyValueDiffer = keyValueDiffers.find({}).create();\n    }\n    ngAfterViewInit() {\n        this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n    }\n    ngDoCheck() {\n        if (this.keyValueDiffer.diff(this.options)) {\n            this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n            this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n        }\n    }\n    ngOnInit() {\n        this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n    }\n    handleBlur(event) {\n        this.inputHandler.getOnModelTouched().apply(event);\n    }\n    handleClick(event) {\n        this.inputHandler.handleClick(event, this.isChromeAndroid());\n    }\n    handleCut(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleCut(event);\n        }\n    }\n    handleInput(event) {\n        if (this.isChromeAndroid()) {\n            this.inputHandler.handleInput(event);\n        }\n    }\n    handleKeydown(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeydown(event);\n        }\n    }\n    handleKeypress(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeypress(event);\n        }\n    }\n    handleKeyup(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeyup(event);\n        }\n    }\n    handlePaste(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handlePaste(event);\n        }\n    }\n    isChromeAndroid() {\n        return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n    }\n    registerOnChange(callbackFunction) {\n        this.inputHandler.setOnModelChange(callbackFunction);\n    }\n    registerOnTouched(callbackFunction) {\n        this.inputHandler.setOnModelTouched(callbackFunction);\n    }\n    setDisabledState(value) {\n        this.elementRef.nativeElement.disabled = value;\n    }\n    validate(abstractControl) {\n        let result = {};\n        if (abstractControl.value > this.max) {\n            result.max = true;\n        }\n        if (abstractControl.value < this.min) {\n            result.min = true;\n        }\n        return result != {} ? result : null;\n    }\n    writeValue(value) {\n        this.inputHandler.setValue(value);\n    }\n}\nCurrencyMaskDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskDirective, deps: [{ token: CURRENCY_MASK_CONFIG, optional: true }, { token: i0.ElementRef }, { token: i0.KeyValueDiffers }], target: i0.ɵɵFactoryTarget.Directive });\nCurrencyMaskDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: CurrencyMaskDirective, selector: \"[currencyMask]\", inputs: { max: \"max\", min: \"min\", options: \"options\" }, host: { listeners: { \"blur\": \"handleBlur($event)\", \"click\": \"handleClick($event)\", \"cut\": \"handleCut($event)\", \"input\": \"handleInput($event)\", \"keydown\": \"handleKeydown($event)\", \"keypress\": \"handleKeypress($event)\", \"keyup\": \"handleKeyup($event)\", \"paste\": \"handlePaste($event)\" } }, providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, { provide: NG_VALIDATORS, useExisting: CurrencyMaskDirective, multi: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[currencyMask]\",\n                    providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, { provide: NG_VALIDATORS, useExisting: CurrencyMaskDirective, multi: true }],\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CURRENCY_MASK_CONFIG]\n                }] }, { type: i0.ElementRef }, { type: i0.KeyValueDiffers }]; }, propDecorators: { max: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], handleBlur: [{\n                type: HostListener,\n                args: [\"blur\", [\"$event\"]]\n            }], handleClick: [{\n                type: HostListener,\n                args: [\"click\", [\"$event\"]]\n            }], handleCut: [{\n                type: HostListener,\n                args: [\"cut\", [\"$event\"]]\n            }], handleInput: [{\n                type: HostListener,\n                args: [\"input\", [\"$event\"]]\n            }], handleKeydown: [{\n                type: HostListener,\n                args: [\"keydown\", [\"$event\"]]\n            }], handleKeypress: [{\n                type: HostListener,\n                args: [\"keypress\", [\"$event\"]]\n            }], handleKeyup: [{\n                type: HostListener,\n                args: [\"keyup\", [\"$event\"]]\n            }], handlePaste: [{\n                type: HostListener,\n                args: [\"paste\", [\"$event\"]]\n            }] } });\n\nclass CurrencyMaskModule {\n}\nCurrencyMaskModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCurrencyMaskModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskModule, declarations: [CurrencyMaskDirective], imports: [CommonModule, FormsModule], exports: [CurrencyMaskDirective] });\nCurrencyMaskModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskModule, imports: [[CommonModule, FormsModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, FormsModule],\n                    declarations: [CurrencyMaskDirective],\n                    exports: [CurrencyMaskDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of ng2-currency-mask\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}